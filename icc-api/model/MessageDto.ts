/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CodeStubDto } from "./CodeStubDto"
import { DelegationDto } from "./DelegationDto"
import { MessageReadStatusDto } from "./MessageReadStatusDto"

/**
 * This entity is a root level object. It represents a Message. It is serialized in JSON and saved in the underlying CouchDB database.
 */
import { decodeBase64 } from "./ModelHelper"

export class MessageDto {
  constructor(json: JSON | any) {
    Object.assign(this as MessageDto, json)
  }

  /**
   * The ID of the message. We encourage using either a v4 UUID or a HL7 Id.
   */
  id?: string
  /**
   * The revision of the message in the database, used for conflict management / optimistic locking.
   */
  rev?: string
  /**
   * The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
   */
  created?: number
  /**
   * The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
   */
  modified?: number
  /**
   * The id of the User that has created this form, will be filled automatically if missing. Not enforced by the application server.
   */
  author?: string
  /**
   * The id of the HealthcareParty that is responsible for this form, will be filled automatically if missing. Not enforced by the application server.
   */
  responsible?: string
  /**
   * The id of the medical location where this entity was created.
   */
  medicalLocationId?: string
  /**
   * A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
   */
  tags?: Array<CodeStubDto>
  /**
   * A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
   */
  codes?: Array<CodeStubDto>
  /**
   * Soft delete (unix epoch in ms) timestamp of the object.
   */
  endOfLife?: number
  /**
   * hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
   */
  deletionDate?: number
  /**
   * Address of the sender of the message
   */
  fromAddress?: string
  /**
   * ID of the healthcare party sending the message
   */
  fromHealthcarePartyId?: string
  formId?: string
  /**
   * Status of the message
   */
  status?: number
  /**
   * The type of user who is the recipient of this message
   */
  recipientsType?: string
  /**
   * List of IDs of healthcare parties to whom the message is addressed
   */
  recipients?: Array<string>
  /**
   * The address of the recipient of the message. Format is of an email address with extra domains defined for mycarenet and ehealth: (efact.mycarenet.be/eattest.mycarenet.be/chapter4.mycarenet.be/ehbox.ehealth.fgov.be)
   */
  toAddresses?: Array<string>
  /**
   * The timestamp (unix epoch in ms) when the message was received
   */
  received?: number
  /**
   * The timestamp (unix epoch in ms) when the message was sent
   */
  sent?: number
  metas?: { [key: string]: string }
  /**
   * Status showing whether the message is read or not and the time of reading
   */
  readStatus?: { [key: string]: MessageReadStatusDto }
  transportGuid?: string
  remark?: string
  conversationGuid?: string
  /**
   * Subject for the message
   */
  subject?: string
  /**
   * Set of IDs for invoices in the message
   */
  invoiceIds?: Array<string>
  /**
   * ID of a parent in a message conversation
   */
  parentId?: string
  externalRef?: string
  unassignedResults?: Array<string>
  assignedResults?: { [key: string]: string }
  senderReferences?: { [key: string]: string }
  /**
   * The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.
   */
  secretForeignKeys?: Array<string>
  /**
   * The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.
   */
  cryptedForeignKeys?: { [key: string]: Array<DelegationDto> }
  /**
   * When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well
   */
  delegations?: { [key: string]: Array<DelegationDto> }
  /**
   * When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation
   */
  encryptionKeys?: { [key: string]: Array<DelegationDto> }
  /**
   * The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
   */
  encryptedSelf?: string
}
