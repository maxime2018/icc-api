/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { ClassificationTemplateDto } from "../model/ClassificationTemplateDto"
import { DelegationDto } from "../model/DelegationDto"
import { DocIdentifier } from "../model/DocIdentifier"
import { PaginatedListClassificationTemplateDto } from "../model/PaginatedListClassificationTemplateDto"

export class iccClassificationTemplateApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   * Returns an instance of created classification Template.
   * @summary Create a classification Template with the current user
   * @param body
   */
  createClassificationTemplate(
    body?: ClassificationTemplateDto
  ): Promise<ClassificationTemplateDto> {
    let _body = null
    _body = body

    const _url = this.host + `/classificationTemplate` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new ClassificationTemplateDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Response is a set containing the ID's of deleted classification Templates.
   * @summary Delete classification Templates.
   * @param classificationTemplateIds
   */
  deleteClassificationTemplates(classificationTemplateIds: string): Promise<Array<DocIdentifier>> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate/${encodeURIComponent(String(classificationTemplateIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }

  /**
   * Keys hast to delimited by coma
   * @summary List classification Templates found By Healthcare Party and secret foreign keyelementIds.
   * @param hcPartyId
   * @param secretFKeys
   */
  findClassificationTemplatesByHCPartyPatientForeignKeys(
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<ClassificationTemplateDto>> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new ClassificationTemplateDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Get a classification Template
   * @param classificationTemplateId
   */
  getClassificationTemplate(classificationTemplateId: string): Promise<ClassificationTemplateDto> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate/${encodeURIComponent(String(classificationTemplateId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new ClassificationTemplateDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Ids are seperated by a coma
   * @summary Get a list of classifications Templates
   * @param ids
   */
  getClassificationTemplateByIds(ids: string): Promise<Array<ClassificationTemplateDto>> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate/byIds/${encodeURIComponent(String(ids))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new ClassificationTemplateDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns a list of classification templates.
   * @summary List all classification templates with pagination
   * @param startKey A label
   * @param startDocumentId An classification template document ID
   * @param limit Number of rows
   */
  listClassificationTemplates(
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListClassificationTemplateDto> {
    let _body = null

    const _url =
      this.host +
      `/classificationTemplate` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListClassificationTemplateDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * Returns the modified classification Template.
   * @summary Modify a classification Template
   * @param body
   */
  modifyClassificationTemplate(
    body?: ClassificationTemplateDto
  ): Promise<ClassificationTemplateDto> {
    let _body = null
    _body = body

    const _url = this.host + `/classificationTemplate` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new ClassificationTemplateDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   * It delegates a classification Template to a healthcare party (By current healthcare party). Returns the element with new delegations.
   * @summary Delegates a classification Template to a healthcare party
   * @param body
   * @param classificationTemplateId
   */
  newClassificationTemplateDelegations(
    classificationTemplateId: string,
    body?: Array<DelegationDto>
  ): Promise<ClassificationTemplateDto> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/classificationTemplate/${encodeURIComponent(String(classificationTemplateId))}/delegate` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new ClassificationTemplateDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
